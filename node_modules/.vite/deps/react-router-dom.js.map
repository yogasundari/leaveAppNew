{
  "version": 3,
  "sources": ["../../react-router/dist/development/dom-export.mjs"],
  "sourcesContent": ["/**\r\n * react-router v7.6.0\r\n *\r\n * Copyright (c) Remix Software Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.md file in the root directory of this source tree.\r\n *\r\n * @license MIT\r\n */\r\nimport {\r\n  FrameworkContext,\r\n  RemixErrorBoundary,\r\n  RouterProvider,\r\n  createBrowserHistory,\r\n  createClientRoutes,\r\n  createClientRoutesWithHMRRevalidationOptOut,\r\n  createRouter,\r\n  decodeViaTurboStream,\r\n  deserializeErrors,\r\n  getHydrationData,\r\n  getPatchRoutesOnNavigationFunction,\r\n  getTurboStreamSingleFetchDataStrategy,\r\n  hydrationRouteProperties,\r\n  invariant,\r\n  mapRouteProperties,\r\n  useFogOFWarDiscovery\r\n} from \"./chunk-D4RADZKF.mjs\";\r\n\r\n// lib/dom-export/dom-router-provider.tsx\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nfunction RouterProvider2(props) {\r\n  return /* @__PURE__ */ React.createElement(RouterProvider, { flushSync: ReactDOM.flushSync, ...props });\r\n}\r\n\r\n// lib/dom-export/hydrated-router.tsx\r\nimport * as React2 from \"react\";\r\nvar ssrInfo = null;\r\nvar router = null;\r\nfunction initSsrInfo() {\r\n  if (!ssrInfo && window.__reactRouterContext && window.__reactRouterManifest && window.__reactRouterRouteModules) {\r\n    if (window.__reactRouterManifest.sri === true) {\r\n      const importMap = document.querySelector(\"script[rr-importmap]\");\r\n      if (importMap?.textContent) {\r\n        try {\r\n          window.__reactRouterManifest.sri = JSON.parse(\r\n            importMap.textContent\r\n          ).integrity;\r\n        } catch (err) {\r\n          console.error(\"Failed to parse import map\", err);\r\n        }\r\n      }\r\n    }\r\n    ssrInfo = {\r\n      context: window.__reactRouterContext,\r\n      manifest: window.__reactRouterManifest,\r\n      routeModules: window.__reactRouterRouteModules,\r\n      stateDecodingPromise: void 0,\r\n      router: void 0,\r\n      routerInitialized: false\r\n    };\r\n  }\r\n}\r\nfunction createHydratedRouter({\r\n  unstable_getContext\r\n}) {\r\n  initSsrInfo();\r\n  if (!ssrInfo) {\r\n    throw new Error(\r\n      \"You must be using the SSR features of React Router in order to skip passing a `router` prop to `<RouterProvider>`\"\r\n    );\r\n  }\r\n  let localSsrInfo = ssrInfo;\r\n  if (!ssrInfo.stateDecodingPromise) {\r\n    let stream = ssrInfo.context.stream;\r\n    invariant(stream, \"No stream found for single fetch decoding\");\r\n    ssrInfo.context.stream = void 0;\r\n    ssrInfo.stateDecodingPromise = decodeViaTurboStream(stream, window).then((value) => {\r\n      ssrInfo.context.state = value.value;\r\n      localSsrInfo.stateDecodingPromise.value = true;\r\n    }).catch((e) => {\r\n      localSsrInfo.stateDecodingPromise.error = e;\r\n    });\r\n  }\r\n  if (ssrInfo.stateDecodingPromise.error) {\r\n    throw ssrInfo.stateDecodingPromise.error;\r\n  }\r\n  if (!ssrInfo.stateDecodingPromise.value) {\r\n    throw ssrInfo.stateDecodingPromise;\r\n  }\r\n  let routes = createClientRoutes(\r\n    ssrInfo.manifest.routes,\r\n    ssrInfo.routeModules,\r\n    ssrInfo.context.state,\r\n    ssrInfo.context.ssr,\r\n    ssrInfo.context.isSpaMode\r\n  );\r\n  let hydrationData = void 0;\r\n  if (ssrInfo.context.isSpaMode) {\r\n    let { loaderData } = ssrInfo.context.state;\r\n    if (ssrInfo.manifest.routes.root?.hasLoader && loaderData && \"root\" in loaderData) {\r\n      hydrationData = {\r\n        loaderData: {\r\n          root: loaderData.root\r\n        }\r\n      };\r\n    }\r\n  } else {\r\n    hydrationData = getHydrationData(\r\n      ssrInfo.context.state,\r\n      routes,\r\n      (routeId) => ({\r\n        clientLoader: ssrInfo.routeModules[routeId]?.clientLoader,\r\n        hasLoader: ssrInfo.manifest.routes[routeId]?.hasLoader === true,\r\n        hasHydrateFallback: ssrInfo.routeModules[routeId]?.HydrateFallback != null\r\n      }),\r\n      window.location,\r\n      window.__reactRouterContext?.basename,\r\n      ssrInfo.context.isSpaMode\r\n    );\r\n    if (hydrationData && hydrationData.errors) {\r\n      hydrationData.errors = deserializeErrors(hydrationData.errors);\r\n    }\r\n  }\r\n  let router2 = createRouter({\r\n    routes,\r\n    history: createBrowserHistory(),\r\n    basename: ssrInfo.context.basename,\r\n    unstable_getContext,\r\n    hydrationData,\r\n    hydrationRouteProperties,\r\n    mapRouteProperties,\r\n    future: {\r\n      unstable_middleware: ssrInfo.context.future.unstable_middleware\r\n    },\r\n    dataStrategy: getTurboStreamSingleFetchDataStrategy(\r\n      () => router2,\r\n      ssrInfo.manifest,\r\n      ssrInfo.routeModules,\r\n      ssrInfo.context.ssr,\r\n      ssrInfo.context.basename\r\n    ),\r\n    patchRoutesOnNavigation: getPatchRoutesOnNavigationFunction(\r\n      ssrInfo.manifest,\r\n      ssrInfo.routeModules,\r\n      ssrInfo.context.ssr,\r\n      ssrInfo.context.routeDiscovery,\r\n      ssrInfo.context.isSpaMode,\r\n      ssrInfo.context.basename\r\n    )\r\n  });\r\n  ssrInfo.router = router2;\r\n  if (router2.state.initialized) {\r\n    ssrInfo.routerInitialized = true;\r\n    router2.initialize();\r\n  }\r\n  router2.createRoutesForHMR = /* spacer so ts-ignore does not affect the right hand of the assignment */\r\n  createClientRoutesWithHMRRevalidationOptOut;\r\n  window.__reactRouterDataRouter = router2;\r\n  return router2;\r\n}\r\nfunction HydratedRouter(props) {\r\n  if (!router) {\r\n    router = createHydratedRouter({\r\n      unstable_getContext: props.unstable_getContext\r\n    });\r\n  }\r\n  let [criticalCss, setCriticalCss] = React2.useState(\r\n    process.env.NODE_ENV === \"development\" ? ssrInfo?.context.criticalCss : void 0\r\n  );\r\n  if (process.env.NODE_ENV === \"development\") {\r\n    if (ssrInfo) {\r\n      window.__reactRouterClearCriticalCss = () => setCriticalCss(void 0);\r\n    }\r\n  }\r\n  let [location, setLocation] = React2.useState(router.state.location);\r\n  React2.useLayoutEffect(() => {\r\n    if (ssrInfo && ssrInfo.router && !ssrInfo.routerInitialized) {\r\n      ssrInfo.routerInitialized = true;\r\n      ssrInfo.router.initialize();\r\n    }\r\n  }, []);\r\n  React2.useLayoutEffect(() => {\r\n    if (ssrInfo && ssrInfo.router) {\r\n      return ssrInfo.router.subscribe((newState) => {\r\n        if (newState.location !== location) {\r\n          setLocation(newState.location);\r\n        }\r\n      });\r\n    }\r\n  }, [location]);\r\n  invariant(ssrInfo, \"ssrInfo unavailable for HydratedRouter\");\r\n  useFogOFWarDiscovery(\r\n    router,\r\n    ssrInfo.manifest,\r\n    ssrInfo.routeModules,\r\n    ssrInfo.context.ssr,\r\n    ssrInfo.context.routeDiscovery,\r\n    ssrInfo.context.isSpaMode\r\n  );\r\n  return (\r\n    // This fragment is important to ensure we match the <ServerRouter> JSX\r\n    // structure so that useId values hydrate correctly\r\n    /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(\r\n      FrameworkContext.Provider,\r\n      {\r\n        value: {\r\n          manifest: ssrInfo.manifest,\r\n          routeModules: ssrInfo.routeModules,\r\n          future: ssrInfo.context.future,\r\n          criticalCss,\r\n          ssr: ssrInfo.context.ssr,\r\n          isSpaMode: ssrInfo.context.isSpaMode,\r\n          routeDiscovery: ssrInfo.context.routeDiscovery\r\n        }\r\n      },\r\n      /* @__PURE__ */ React2.createElement(RemixErrorBoundary, { location }, /* @__PURE__ */ React2.createElement(RouterProvider2, { router }))\r\n    ), /* @__PURE__ */ React2.createElement(React2.Fragment, null))\r\n  );\r\n}\r\nexport {\r\n  HydratedRouter,\r\n  RouterProvider2 as RouterProvider\r\n};\r\n"],
  "mappings": "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",
  "names": ["_a", "_b"]
}
